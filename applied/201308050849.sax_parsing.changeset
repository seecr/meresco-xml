Changeset created on Mon Aug 05 08:49:53 UTC 2013 by Seecr (Seek You Too B.V.)

Description: SAX(-like) Parsing

    Added SubTreesTreeBuilder class to be used in a lxml.etree Parser as "target".
    This allows subtrees in a larger XML-file to be extracted into ElementTrees;
    works well with using the parsers feed-interface for streaming data in.

Baseline version: 4.1.2

From a02cb6dd218bc63801dff064c14d8c72038b8e53 Mon Sep 17 00:00:00 2001
From: Thijs Janssen <thijs@seecr.nl>
Date: Sat, 11 May 2013 18:31:35 +0200
Subject: [PATCH 1/4] TJ: removed \$t

---
 test/alltests.sh |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/test/alltests.sh b/test/alltests.sh
index f05f288..869b416 100755
--- a/test/alltests.sh
+++ b/test/alltests.sh
@@ -37,6 +37,6 @@ if [ "${option:0:10}" == "--python2." ]; then
 fi
 echo Found Python versions: $pyversions
 for pycmd in $pyversions; do
-    echo "================ $t with $pycmd _alltests.py $@ ================"
+    echo "================ $pycmd _alltests.py $@ ================"
     $pycmd _alltests.py "$@"
 done
-- 
1.7.1


From 38e069771951ff71955e882d18e304d050b4f969 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 2 Aug 2013 16:16:54 +0200
Subject: [PATCH 2/4] JJ/TS: added meresco.xml.sax module with SubTreesTreeBuilder.

---
 meresco/xml/sax.py |  100 ++++++++++++++++++++++++++
 test/_alltests.py  |   19 +++---
 test/saxtest.py    |  197 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 307 insertions(+), 9 deletions(-)
 create mode 100644 meresco/xml/sax.py
 create mode 100644 test/saxtest.py

diff --git a/meresco/xml/sax.py b/meresco/xml/sax.py
new file mode 100644
index 0000000..8d7d8ff
--- /dev/null
+++ b/meresco/xml/sax.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python2.6
+## begin license ##
+#
+# "Meresco-Xml" is a set of components and tools for handling xml data objects.
+#
+# Copyright (C) 2013 Seecr (Seek You Too B.V.) http://seecr.nl
+#
+# This file is part of "Meresco-Xml"
+#
+# "Meresco-Xml" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# "Meresco-Xml" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with "Meresco-Xml"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from lxml.etree import TreeBuilder, XMLParser, parse, tostring
+
+from os.path import abspath, dirname, join
+
+
+class SubTreesTreeBuilder(object):
+    def __init__(self, buildFor, treeBuilderFactory=TreeBuilder):
+        self._buildFor = buildFor
+        self._treeBuilderFactory = treeBuilderFactory
+        self._subtrees = []
+        self._currentTreeBuilders = {}
+        self._stack = []
+
+    def buildFor(self):
+        return [id for (id, f) in self._buildFor.items() if f(self._stack)]
+
+    def _nsmapFullStack(self):
+        enrichedNSmap = {}
+        for node in self._stack:
+            enrichedNSmap.update(node['nsmap'])
+        return enrichedNSmap
+
+    def getSubtrees(self):
+        while self._subtrees:
+            yield self._subtrees.pop(0)
+
+    # etree TreeBuilder interface
+    def start(self, tag, attrs, nsmap=None):
+        if nsmap is None:
+            nsmap = {}
+        self._stack.append({'tag': tag, 'attrs': attrs, 'nsmap': nsmap})
+
+        for tb in self._currentTreeBuilders.values():
+            tb.start(tag, attrs, nsmap)
+
+        builders = self.buildFor()
+        if builders:
+            for id in builders:
+                builder = self._treeBuilderFactory()
+                namespaces = self._nsmapFullStack()
+                builder.start(tag, attrs, namespaces)
+                self._currentTreeBuilders[id] = builder
+
+
+    def comment(self, comment):
+        for tb in self._currentTreeBuilders.values():
+            tb.comment(comment)
+
+    def data(self, data):
+        for tb in self._currentTreeBuilders.values():
+            tb.data(data)
+
+    def end(self, tag):
+        builders = self.buildFor()
+        assert self._stack.pop()['tag'] == tag, 'Stack and parser out-of-sync.'
+
+        if not self._currentTreeBuilders:
+            return
+
+        for tb in self._currentTreeBuilders.values():
+            tb.end(tag)
+
+        if builders:
+            for id in builders:
+                root = self._currentTreeBuilders[id].close()
+                self._subtrees.append((id, root))
+                del self._currentTreeBuilders[id]
+
+    def pi(self, target, data):
+        for tb in self._currentTreeBuilders.values():
+            tb.pi(target, data)
+
+    def close(self):
+        assert not self._currentTreeBuilders, 'TreeBuilder(s) still present on close.'
+
diff --git a/test/_alltests.py b/test/_alltests.py
index 436468f..7fbe9ae 100644
--- a/test/_alltests.py
+++ b/test/_alltests.py
@@ -1,27 +1,27 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-# 
-# "Meresco-Xml" is a set of components and tools for handling xml data objects. 
-# 
+#
+# "Meresco-Xml" is a set of components and tools for handling xml data objects.
+#
 # Copyright (C) 2005-2010 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# 
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+#
 # This file is part of "Meresco-Xml"
-# 
+#
 # "Meresco-Xml" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
-# 
+#
 # "Meresco-Xml" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with "Meresco-Xml"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
+#
 ## end license ##
 
 from sys import path as sysPath                   #DO_NOT_DISTRIBUTE
@@ -37,6 +37,7 @@ import unittest
 
 from namespacestest import NamespacesTest
 from normalizetest import NormalizeTest
+from saxtest import SaxTest
 from utilstest import UtilsTest
 from xmlrewritetest import XMLRewriteTest
 
diff --git a/test/saxtest.py b/test/saxtest.py
new file mode 100644
index 0000000..7d5d3a7
--- /dev/null
+++ b/test/saxtest.py
@@ -0,0 +1,197 @@
+## begin license ##
+#
+# "Meresco-Xml" is a set of components and tools for handling xml data objects.
+#
+# Copyright (C) 2013 Seecr (Seek You Too B.V.) http://seecr.nl
+#
+# This file is part of "Meresco-Xml"
+#
+# "Meresco-Xml" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# "Meresco-Xml" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with "Meresco-Xml"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from seecr.test import SeecrTestCase
+
+from meresco.xml import namespaces
+from meresco.xml.sax import SubTreesTreeBuilder
+
+from lxml.etree import parse, XMLParser
+
+from math import ceil
+from StringIO import StringIO
+
+
+namespaces = namespaces.copyUpdate({
+    'def_': 'u:ri/default#',
+    'newdef_': 'u:ri/newdefault#',
+    'other_': 'u:ri/other#',
+    'pre_': 'u:ri/prefixed#',
+})
+xpath = namespaces.xpath
+xpathFirst = namespaces.xpathFirst
+
+
+class SaxTest(SeecrTestCase):
+    def testParseAndProcessSimpleFile(self):
+        builder = SubTreesTreeBuilder(buildFor={
+            'record': lambda stack: [d['tag'] for d in stack] == ['records', 'record']
+        })
+        result, loops = parseIncrementallyBy20(builder=builder, inputXml=XML)
+
+        self.assertEquals(ceil(len(XML) / 20.0), loops)
+        self.assertEquals(3, len(result))
+        self.assertEquals(['record']*3, [r[0] for r in result])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML), '/records/record[1]'),
+            result[0][1])
+        self.assertEqualsLxml(xpathFirst(parseString(XML), '/records/record[2]'), result[1][1])
+        self.assertEqualsLxml(xpathFirst(parseString(XML), '/records/record[3]'), result[2][1])
+
+    def testParseDifferentStructure(self):
+        builder = SubTreesTreeBuilder(buildFor={
+            'sub': lambda stack: [d['tag'] for d in stack] == ['root', 'sub']
+        })
+        result, loops = parseIncrementallyBy20(builder=builder, inputXml=XML2)
+
+        self.assertEquals(2, len(result))
+        self.assertEquals(['sub']*2, [r[0] for r in result])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML2), '/root/sub[1]'),
+            result[0][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML2), '/root/sub[2]'),
+            result[1][1])
+
+    def testMultipleBuildForFunctionsWithNS(self):
+        builder = SubTreesTreeBuilder(buildFor={
+            'records': lambda stack: [d['tag'] for d in stack] == ['records'],
+            'record': lambda stack: [d['tag'] for d in stack] == ['records', 'record'],
+            'default-ns': lambda stack: [d['tag'] for d in stack] == ['records', 'record', '{u:ri/default#}subtag.NS'],
+            'prefixed': lambda stack: [d['tag'] for d in stack] == ['records', 'record', '{u:ri/prefixed#}fixed'],
+        })
+        result, loops = parseIncrementallyBy20(builder=builder, inputXml=XML)
+
+        self.assertEquals(['record', 'record', 'default-ns', 'prefixed', 'record', 'records'], [r[0] for r in result])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML), '/records/record[1]'),
+            result[0][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML), '/records/record[2]'),
+            result[1][1])
+        self.assertEqualsLxml(
+                xpathFirst(parseString(XML), '/records/record[3]/def_:subtag.NS'),
+            result[2][1])
+        self.assertEqualsLxml(
+                xpathFirst(parseString(XML), '/records/record[3]/pre_:fixed'),
+            result[3][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML), '/records/record[3]'),
+            result[4][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML), '/records'),
+            result[5][1])
+
+    def testNamespacePrefixesAndDefaultsPreserved(self):
+        builder = SubTreesTreeBuilder(buildFor={
+            'sub_def': lambda stack: [d['tag'] for d in stack] == ['{u:ri/default#}root', '{u:ri/default#}subInDefaultNS'],
+            'prefixed': lambda stack: [d['tag'] for d in stack] == ['{u:ri/default#}root', '{u:ri/default#}subInDefaultNS', '{u:ri/prefixed#}fixed'],
+            'preother': lambda stack: [d['tag'] for d in stack] == ['{u:ri/default#}root', '{u:ri/default#}subInDefaultNS', '{u:ri/other#}other'],
+            'preinside': lambda stack: [d['tag'] for d in stack] == ['{u:ri/default#}root', '{u:ri/default#}subInDefaultNS', '{u:ri/other#}other', '{u:ri/other#}inside'],
+            'newdefault': lambda stack: [d['tag'] for d in stack] == ['{u:ri/default#}root', '{u:ri/default#}subInDefaultNS', '{u:ri/other#}other', '{u:ri/newdefault#}newdefault'],
+            'node': lambda stack: [d['tag'] for d in stack] == ['{u:ri/default#}root', '{u:ri/default#}subInDefaultNS', '{u:ri/other#}other', '{u:ri/newdefault#}newdefault', '{u:ri/newdefault#}node'],
+        })
+        result, loops = parseIncrementallyBy20(builder=builder, inputXml=XML_NS)
+
+        self.assertEquals(6, len(result))
+        self.assertEquals(['prefixed', 'preinside', 'node', 'newdefault', 'preother', 'sub_def'], [r[0] for r in result])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS/pre_:fixed'),
+            result[0][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS/other_:other/other_:inside'),
+            result[1][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS/other_:other/newdef_:newdefault/newdef_:node'),
+            result[2][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS/other_:other/newdef_:newdefault'),
+            result[3][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS/other_:other'),
+            result[4][1])
+        self.assertEqualsLxml(
+            xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS'),
+            result[5][1])
+
+
+def parseIncrementallyBy20(builder, inputXml):
+    parser = XMLParser(target=builder)
+    xmlStream = StringIO(inputXml)
+    result = []
+    data = xmlStream.read(20)
+    loops = 0
+    while data:
+        loops += 1
+        parser.feed(data)
+        for id, subtree in builder.getSubtrees():
+            result.append((id, subtree))
+        data = xmlStream.read(20)
+    retval = parser.close()
+    assert retval is None, 'Errr?'
+    assert ceil(len(inputXml) / 20.0) == loops, 'Errr?'
+    return result, loops
+
+
+def parseString(s):
+    return parse(StringIO(s))
+
+XML = '''\
+<records>
+  <record attr="value">
+    <!-- comment -->
+    <?pi data?>
+    <subtag attr="value" xml:lang="en">subtext</subtag>
+    text
+  </record>
+  <record>text</record>
+  <record>
+    <subtag.NS xmlns='u:ri/default#' />
+    <pre:fixed xmlns:pre="u:ri/prefixed#" />
+  </record>
+</records>'''
+
+XML2 = '''\
+<root>
+  <sub>
+    <stuff/>
+  </sub>
+  <sub>
+    <other/>
+  </sub>
+</root>'''
+
+XML_NS = '''\
+<root xmlns="u:ri/default#" xmlns:pre="u:ri/prefixed#">
+  <subInDefaultNS>
+    <pre:fixed />
+    <pre:other xmlns:pre="u:ri/other#">
+        <pre:inside />
+        <newdefault xmlns="u:ri/newdefault#">
+            <node />
+        </newdefault>
+    </pre:other>
+  </subInDefaultNS>
+</root>'''
+
-- 
1.7.1


From 764bd8572cb223dd96fa43334f5c54751b9d0195 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 5 Aug 2013 09:28:08 +0200
Subject: [PATCH 3/4] JJ/TS: added SimpleSaxFileParser, fixed logic bug.

Must call getSubtrees() after then close() on the parser.
---
 meresco/xml/sax.py |   27 ++++++++++++++++++++++++++-
 test/saxtest.py    |   31 +++++++++++++++++++++++++++++--
 2 files changed, 55 insertions(+), 3 deletions(-)

diff --git a/meresco/xml/sax.py b/meresco/xml/sax.py
index 8d7d8ff..83b4895 100644
--- a/meresco/xml/sax.py
+++ b/meresco/xml/sax.py
@@ -66,7 +66,6 @@ class SubTreesTreeBuilder(object):
                 builder.start(tag, attrs, namespaces)
                 self._currentTreeBuilders[id] = builder
 
-
     def comment(self, comment):
         for tb in self._currentTreeBuilders.values():
             tb.comment(comment)
@@ -98,3 +97,29 @@ class SubTreesTreeBuilder(object):
     def close(self):
         assert not self._currentTreeBuilders, 'TreeBuilder(s) still present on close.'
 
+
+class SimpleSaxFileParser(object):
+    def __init__(self, stream, path, callback):
+        self._stream = stream
+        self._path = path
+        self._callback = callback
+
+    def start(self):
+        def isPath(stack):
+            return [d['tag'] for d in stack] == self._path
+        builder = SubTreesTreeBuilder(buildFor={
+            'simple': isPath,
+        })
+        def processSubtrees():
+            for id, subtree in builder.getSubtrees():
+                self._callback(subtree)
+        parser = XMLParser(target=builder)
+
+        data = self._stream.read(4096)
+        while data:
+            parser.feed(data)
+            processSubtrees()
+            data = self._stream.read(4096)
+        parser.close()
+        processSubtrees()
+
diff --git a/test/saxtest.py b/test/saxtest.py
index 7d5d3a7..208639e 100644
--- a/test/saxtest.py
+++ b/test/saxtest.py
@@ -25,9 +25,9 @@
 from seecr.test import SeecrTestCase
 
 from meresco.xml import namespaces
-from meresco.xml.sax import SubTreesTreeBuilder
+from meresco.xml.sax import SubTreesTreeBuilder, SimpleSaxFileParser
 
-from lxml.etree import parse, XMLParser
+from lxml.etree import parse, XMLParser, tostring
 
 from math import ceil
 from StringIO import StringIO
@@ -135,6 +135,31 @@ class SaxTest(SeecrTestCase):
             xpathFirst(parseString(XML_NS), '/def_:root/def_:subInDefaultNS'),
             result[5][1])
 
+    def testSimpleSaxFileParser(self):
+        xml = StringIO("""<a><b/><b/><c/><b/></a>""")
+        result = []
+        saxfp = SimpleSaxFileParser(stream=xml, path=['a', 'b'], callback=result.append)
+        saxfp.start()
+
+        self.assertEquals(3, len(result))
+        self.assertEquals('b', result[0].tag)
+
+    def testMustCallGetSubtreesAfterCloseToo(self):
+        xml = """<a><b/></a>"""
+        builder = SubTreesTreeBuilder(buildFor={
+            'bee': lambda stack: [d['tag'] for d in stack] == ['a', 'b'],
+        })
+        parser = XMLParser(target=builder)
+
+        parser.feed(xml)
+        self.assertEquals([], list(builder.getSubtrees()))
+
+        parser.close()
+        result = list(builder.getSubtrees())
+        self.assertEquals(1, len(result))
+        self.assertEquals('bee', result[0][0])
+        self.assertEquals('<b/>', tostring(result[0][1]))
+
 
 def parseIncrementallyBy20(builder, inputXml):
     parser = XMLParser(target=builder)
@@ -149,6 +174,8 @@ def parseIncrementallyBy20(builder, inputXml):
             result.append((id, subtree))
         data = xmlStream.read(20)
     retval = parser.close()
+    for id, subtree in builder.getSubtrees():
+        result.append((id, subtree))
     assert retval is None, 'Errr?'
     assert ceil(len(inputXml) / 20.0) == loops, 'Errr?'
     return result, loops
-- 
1.7.1


From 295a9d19eeaaaac072e6ca8fa5e6c96e35e55bbd Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 5 Aug 2013 10:17:30 +0200
Subject: [PATCH 4/4] JJ/TS: updated setup.py desciption.

---
 setup.py |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 30bf1ec..78bc5ab 100644
--- a/setup.py
+++ b/setup.py
@@ -33,8 +33,8 @@ setup(
     ],
     version='%VERSION%',
     url='http://www.meresco.org',
-    author='Seek You Too',
-    author_email='info@cq2.nl',
+    author='Seecr (Seek You Too B.V.)',
+    author_email='info@seecr.nl',
     description='Meresco Xml is a set of components and tools for handling xml data objects.',
     long_description='Meresco Xml is a set of components and tools for handling xml data objects.',
     license='GNU Public License',
-- 
1.7.1

